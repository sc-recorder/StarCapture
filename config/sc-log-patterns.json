{
  "name": "SC Recorder Log Patterns",
  "version": "1.0.1",
  "description": "Star Citizen log parsing patterns for SC Recorder",
  "transforms": {
    "parseTimestamp": {
      "description": "Extracts timestamp from ISO 8601 format",
      "type": "timestamp"
    },
    "cleanActorName": {
      "description": "Cleans up actor/NPC names",
      "type": "cleanName",
      "operations": [
        {
          "stripPrefix": [
            "PU_Human_Enemy_GroundCombat_NPC_",
            "AIModule_Unmanned_PU_"
          ]
        },
        {
          "removeTrailingNumbers": true
        },
        {
          "replaceUnderscores": true
        }
      ]
    },
    "cleanWeaponName": {
      "description": "Cleans up weapon names",
      "type": "cleanName",
      "operations": [
        {
          "removeTrailingNumbers": true
        },
        {
          "replaceUnderscores": true
        }
      ]
    },
    "cleanVehicleName": {
      "description": "Cleans up vehicle names",
      "type": "cleanName",
      "operations": [
        {
          "removeTrailingNumbers": true
        },
        {
          "replaceUnderscores": true
        }
      ]
    },
    "cleanZoneName": {
      "description": "Cleans up zone/location names",
      "type": "cleanName",
      "operations": [
        {
          "removeTrailingNumbers": true
        },
        {
          "replaceUnderscores": true
        }
      ]
    }
  },
  "categories": {
    "combat": {
      "name": "Combat Events",
      "color": "#ff4444",
      "icon": "‚öîÔ∏è"
    },
    "vehicle": {
      "name": "Vehicle Events",
      "color": "#44aaff",
      "icon": "üöÄ"
    },
    "mission": {
      "name": "Mission Events",
      "color": "#44ff44",
      "icon": "üìã"
    },
    "system": {
      "name": "System Events",
      "color": "#ffaa44",
      "icon": "‚öôÔ∏è"
    },
    "player": {
      "name": "Player Events",
      "color": "#ff44ff",
      "icon": "üë§"
    },
    "location": {
      "name": "Location Events",
      "color": "#44ffff",
      "icon": "üìç"
    }
  },
  "patterns": [
    {
      "id": "player_kill",
      "category": "combat",
      "name": "Player Kill",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?CActor::Kill: '([^']+)' \\[(\\d+)\\] in zone '([^']+)' killed by '([^']+)' \\[(\\d+)\\] using '([^']+)' \\[Class ([^\\]]+)\\] with damage type '([^']+)'",
      "description": "Detects when a player or NPC is killed",
      "severity": "high",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "victim": {
          "group": 2,
          "transform": "cleanActorName"
        },
        "victimId": {
          "group": 3
        },
        "zone": {
          "group": 4,
          "transform": "cleanZoneName"
        },
        "killer": {
          "group": 5,
          "transform": "cleanActorName"
        },
        "killerId": {
          "group": 6
        },
        "weapon": {
          "group": 7,
          "transform": "cleanWeaponName"
        },
        "weaponClass": {
          "group": 8
        },
        "damageType": {
          "group": 9
        }
      },
      "message": "{killer} killed {victim} with {weapon}"
    },
    {
      "id": "vehicle_destroyed",
      "category": "vehicle",
      "name": "Vehicle Destroyed",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?CVehicle::OnAdvanceDestroyLevel: Vehicle '([^']+)' \\[(\\d+)\\] in zone '([^']+)'.*? driven by '([^']+)' \\[(\\d+)\\].*?advanced from destroy level \\d to 2 caused by '([^']+)' \\[(\\d+)\\]",
      "description": "Detects when a vehicle is destroyed",
      "severity": "high",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "vehicle": {
          "group": 2,
          "transform": "cleanVehicleName"
        },
        "vehicleId": {
          "group": 3
        },
        "zone": {
          "group": 4,
          "transform": "cleanZoneName"
        },
        "driver": {
          "group": 5,
          "transform": "cleanActorName"
        },
        "driverId": {
          "group": 6
        },
        "destroyer": {
          "group": 7,
          "transform": "cleanActorName"
        },
        "destroyerId": {
          "group": 8
        }
      },
      "message": "{vehicle} destroyed by {destroyer}"
    },
    {
      "id": "vehicle_soft_death",
      "category": "vehicle",
      "name": "Vehicle Disabled",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?CVehicle::OnAdvanceDestroyLevel: Vehicle '([^']+)' \\[(\\d+)\\] in zone '([^']+)'.*? driven by '([^']+)' \\[(\\d+)\\].*?advanced from destroy level 0 to 1 caused by '([^']+)' \\[(\\d+)\\]",
      "description": "Detects when a vehicle is disabled/soft death",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "vehicle": {
          "group": 2,
          "transform": "cleanVehicleName"
        },
        "vehicleId": {
          "group": 3
        },
        "zone": {
          "group": 4,
          "transform": "cleanZoneName"
        },
        "driver": {
          "group": 5,
          "transform": "cleanActorName"
        },
        "driverId": {
          "group": 6
        },
        "attacker": {
          "group": 7,
          "transform": "cleanActorName"
        },
        "attackerId": {
          "group": 8
        }
      },
      "message": "{vehicle} disabled by {attacker}"
    },
    {
      "id": "seat_entered",
      "category": "vehicle",
      "name": "Vehicle Entered",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<Vehicle Control Flow>\\s*CVehicle::Initialize::<lambda_1>::operator \\(\\): Local client node \\[(\\d+)\\] granted control token for '([^']+)' \\[(\\d+)\\]",
      "description": "Detects when player enters a vehicle",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "playerId": {
          "group": 2
        },
        "vehicle": {
          "group": 3,
          "transform": "cleanVehicleName"
        },
        "vehicleId": {
          "group": 4
        }
      },
      "message": "Entered {vehicle}"
    },
    {
      "id": "seat_exited",
      "category": "vehicle",
      "name": "Vehicle Exited",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<Vehicle Control Flow>\\s*CVehicleMovementBase::ClearDriver: Local client node \\[(\\d+)\\] releasing control token for '([^']+)' \\[(\\d+)\\]",
      "description": "Detects when player exits a vehicle",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "playerId": {
          "group": 2
        },
        "vehicle": {
          "group": 3,
          "transform": "cleanVehicleName"
        },
        "vehicleId": {
          "group": 4
        }
      },
      "message": "Exited {vehicle}"
    },
    {
      "id": "mission_start",
      "category": "mission",
      "name": "Mission Started",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<CLocalMissionPhaseMarker::CreateMarker>\\s*Creating objective marker: missionId \\[([^\\]]+)\\], generator name \\[([^\\]]+)\\], contract \\[([^\\]]+)\\]",
      "description": "Detects when a mission starts",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "missionId": {
          "group": 2
        },
        "generator": {
          "group": 3
        },
        "contract": {
          "group": 4
        }
      },
      "message": "Mission started: {contract}"
    },
    {
      "id": "mission_complete",
      "category": "mission",
      "name": "Mission Complete",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<EndMission>\\s*Ending mission for player\\. MissionId\\[([^\\]]+)\\] Player\\[([^\\]]+)\\] PlayerId\\[([^\\]]+)\\] CompletionType\\[([^\\]]+)\\]",
      "description": "Detects when a mission completes",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "missionId": {
          "group": 2
        },
        "player": {
          "group": 3
        },
        "playerId": {
          "group": 4
        },
        "completionType": {
          "group": 5
        }
      },
      "message": "Mission {completionType}: {missionId}"
    },
    {
      "id": "player_connect",
      "category": "player",
      "name": "Player Connected",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?<Expect Incoming Connection>.*?nickname=\"([^\"]+)\".*?playerGEID=([0-9]+)",
      "description": "Detects when a player connects",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "player": {
          "group": 2
        },
        "playerId": {
          "group": 3
        }
      },
      "message": "{player} connected"
    },
    {
      "id": "player_disconnect",
      "category": "player",
      "name": "Player Disconnected",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?\\[CIG\\] CCIGBroker::FastShutdown",
      "description": "Detects when player disconnects",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        }
      },
      "message": "Player disconnected"
    },
    {
      "id": "game_joined",
      "category": "system",
      "name": "Game Joined",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[\\+\\] \\[CIG\\] \\{Join PU\\}",
      "description": "Detects when joining the persistent universe",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        }
      },
      "message": "Joined Persistent Universe"
    },
    {
      "id": "zone_entered",
      "category": "location",
      "name": "Zone Entered",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Entering zone '([^']+)'",
      "description": "Detects when entering a new zone",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "zone": {
          "group": 2,
          "transform": "cleanZoneName"
        }
      },
      "message": "Entered {zone}"
    },
    {
      "id": "spawn_location",
      "category": "location",
      "name": "Spawn Location",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Spawning at location '([^']+)'",
      "description": "Detects spawn location",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "location": {
          "group": 2,
          "transform": "cleanZoneName"
        }
      },
      "message": "Spawned at {location}"
    },
    {
      "id": "quantum_jump_start",
      "category": "location",
      "name": "Quantum Jump Started",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Quantum Travel.*?started.*?destination[:\\s]+([^\\s,]+)",
      "description": "Detects quantum jump initiation",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "destination": {
          "group": 2
        }
      },
      "message": "Quantum jump to {destination}"
    },
    {
      "id": "quantum_jump_complete",
      "category": "location",
      "name": "Quantum Jump Complete",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Quantum Travel.*?completed",
      "description": "Detects quantum jump completion",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        }
      },
      "message": "Quantum jump completed"
    },
    {
      "id": "crime_committed",
      "category": "player",
      "name": "Crime Committed",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Crime.*?committed.*?type[:\\s]+([^\\s,]+).*?level[:\\s]+(\\d+)",
      "description": "Detects when a crime is committed",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "crimeType": {
          "group": 2
        },
        "crimeLevel": {
          "group": 3
        }
      },
      "message": "Crime committed: {crimeType} (Level {crimeLevel})"
    },
    {
      "id": "bounty_received",
      "category": "player",
      "name": "Bounty Received",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Bounty.*?amount[:\\s]+(\\d+).*?UEC",
      "description": "Detects bounty placed on player",
      "severity": "high",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "amount": {
          "group": 2
        }
      },
      "message": "Bounty placed: {amount} UEC"
    },
    {
      "id": "insurance_claim_complete",
      "category": "system",
      "name": "Insurance Claim",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<CWallet::RmMulticastOnProcessClaimCallback>\\s*Claim Complete - entitlementURN: ([^,]+), result: (\\d+),\\s*requestId: (\\d+)",
      "description": "Detects when an insurance claim is successfully processed by the server",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "entitlementURN": {
          "group": 2
        },
        "result": {
          "group": 3
        },
        "requestId": {
          "group": 4
        }
      },
      "message": "Insurance claim processed (Request #{requestId})"
    },
    {
      "id": "fatal_collision",
      "category": "vehicle",
      "name": "Fatal Collision",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<FatalCollision>\\s*Fatal Collision occured for vehicle ([^\\[]+)\\[Part: ([^,]+), Pos: x: ([^,]+), y: ([^,]+), z: ([^,]+), Zone: ([^,]+), PlayerPilot: (\\d+)\\] after hitting entity: ([^\\[]+)",
      "description": "Detects vehicle crashes with detailed collision information",
      "severity": "high",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "vehicle": {
          "group": 2,
          "transform": "cleanVehicleName"
        },
        "part": {
          "group": 3
        },
        "posX": {
          "group": 4
        },
        "posY": {
          "group": 5
        },
        "posZ": {
          "group": 6
        },
        "zone": {
          "group": 7,
          "transform": "cleanZoneName"
        },
        "playerPilot": {
          "group": 8
        },
        "entityHit": {
          "group": 9
        }
      },
      "message": "{vehicle} crashed into {entityHit}"
    },
    {
      "id": "mission_start_notification",
      "category": "mission",
      "name": "Mission Accepted",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<CSCPlayerMissionLog::MissionStartCommsNotification>.*?ContractId: \\[([^\\]]+)\\]\\.\\s*MissionId: ([^\\s]+)",
      "description": "Detects when a player accepts/starts a mission",
      "severity": "high",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "contractId": {
          "group": 2
        },
        "missionId": {
          "group": 3
        }
      },
      "message": "Mission accepted"
    },
    {
      "id": "mission_end",
      "category": "mission",
      "name": "Mission Ended",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<EndMission>\\s*Ending mission for player\\.\\s*MissionId\\[([^\\]]+)\\]\\s*Player\\[([^\\]]+)\\]\\s*PlayerId\\[([^\\]]+)\\]\\s*CompletionType\\[([^\\]]+)\\]\\s*Reason\\[([^\\]]+)\\]",
      "description": "Detects when a mission ends with completion type",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "missionId": {
          "group": 2
        },
        "player": {
          "group": 3
        },
        "playerId": {
          "group": 4
        },
        "completionType": {
          "group": 5
        },
        "reason": {
          "group": 6
        }
      },
      "message": "Mission {completionType}: {reason}"
    },
    {
      "id": "mission_objective_marker_added",
      "category": "mission",
      "name": "Mission Waypoint Added",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<CObjectiveMarkerComponent::AddToPlayerDataBank>\\s*([^\\[]+)\\[([^\\]]+)\\] - Added to DataBank of Player: ([^\\[]+)\\[([^\\]]+)\\] - ZonePos: x: ([^,]+), y: ([^,]+), z: ([^,]+), missionId\\[([^\\]]+)\\], objectiveId\\[([^\\]]+)\\]",
      "description": "Detects when a mission waypoint/objective marker is added",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "markerName": {
          "group": 2
        },
        "markerId": {
          "group": 3
        },
        "player": {
          "group": 4
        },
        "playerId": {
          "group": 5
        },
        "posX": {
          "group": 6
        },
        "posY": {
          "group": 7
        },
        "posZ": {
          "group": 8
        },
        "missionId": {
          "group": 9
        },
        "objectiveId": {
          "group": 10
        }
      },
      "message": "Mission waypoint added"
    },
    {
      "id": "mission_objective_marker_removed",
      "category": "mission",
      "name": "Mission Waypoint Removed",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<CObjectiveMarkerComponent::RemoveFromPlayerDataBank>\\s*([^\\[]+)\\[([^\\]]+)\\] - Removed from DataBank of Player: ([^\\[]+)\\[([^\\]]+)\\].*?missionId\\[([^\\]]+)\\], objectiveId\\[([^\\]]+)\\]",
      "description": "Detects when a mission waypoint/objective marker is removed",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "markerName": {
          "group": 2
        },
        "markerId": {
          "group": 3
        },
        "player": {
          "group": 4
        },
        "playerId": {
          "group": 5
        },
        "missionId": {
          "group": 6
        },
        "objectiveId": {
          "group": 7
        }
      },
      "message": "Mission waypoint removed"
    },
    {
      "id": "jump_point_state_change",
      "category": "location",
      "name": "Jump Point State Change",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<Jump Point Changing State>\\s*State is now (\\w+).*?\\|[^|]*\\|[^|]*\\| (\\w+) \\|.*?JumpPoint_Permanent \\[(\\d+)\\].*?in zone ([^\\)]+)\\)",
      "description": "Detects when a jump point changes state (Opening, Inactive, etc.)",
      "severity": "medium",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "state": {
          "group": 2
        },
        "currentSystem": {
          "group": 3
        },
        "jumpPointId": {
          "group": 4
        },
        "zone": {
          "group": 5
        }
      },
      "message": "Jump point {state} in {zone}"
    },
    {
      "id": "jump_drive_state_change",
      "category": "vehicle",
      "name": "Jump Drive State Change",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<Jump Drive State Changed>\\s*Now (\\w+).*?\\|[^|]*\\| \\w+ \\| (\\w+) \\|.*?\\[(\\d+)\\].*?in zone ([^\\)]+)\\)",
      "description": "Detects jump drive state changes (Idle, EntryChecks, Tuning, RequestingJump, WaitingForOpen)",
      "severity": "low",
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "driveState": {
          "group": 2
        },
        "currentSystem": {
          "group": 3
        },
        "driveId": {
          "group": 4
        },
        "zone": {
          "group": 5
        }
      },
      "message": "Jump drive: {driveState}"
    },
    {
      "id": "system_arrival_pyro",
      "category": "location",
      "name": "Arriving in Pyro",
      "pattern": "Loading screen for Pyro : \\w+ closed after ([\\d\\.]+) seconds",
      "description": "Detects arrival in Pyro system",
      "severity": "high",
      "fields": {
        "loadTime": {
          "group": 1
        }
      },
      "message": "Arrived in Pyro (loaded in {loadTime}s)"
    },
    {
      "id": "system_arrival_stanton",
      "category": "location",
      "name": "Arriving in Stanton",
      "pattern": "Loading screen for Stanton : \\w+ closed after ([\\d\\.]+) seconds",
      "description": "Detects arrival in Stanton system",
      "severity": "high",
      "fields": {
        "loadTime": {
          "group": 1
        }
      },
      "message": "Arrived in Stanton (loaded in {loadTime}s)"
    },
    {
      "id": "atc_communication_establish",
      "category": "player",
      "name": "ATC Communication",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>\\s*\\[Notice\\]\\s*<Connection Flow>\\s*CSCCommsComponent::DoEstablishCommunicationCommon:.*?for ([^\\[]+) \\[(\\d+)\\].*?AImodule_ATC_([^\\s]+) \\[(\\d+)\\]",
      "description": "Detects ATC communication with stations (requires player filtering)",
      "severity": "low",
      "requiresPlayerFilter": true,
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "playerName": {
          "group": 2
        },
        "playerId": {
          "group": 3
        },
        "atcStation": {
          "group": 4
        },
        "atcModuleId": {
          "group": 5
        }
      },
      "message": "ATC contact: {atcStation}"
    },
    {
      "id": "hangar_assignment",
      "category": "location",
      "name": "Hangar Assignment",
      "pattern": "<(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)>.*?Hangar_(\\w+)_(\\w+)_\\d+.*?for ([^\\[]+) \\[(\\d+)\\]",
      "description": "Detects hangar assignments for landing",
      "severity": "medium",
      "requiresPlayerFilter": true,
      "fields": {
        "timestamp": {
          "group": 1,
          "transform": "parseTimestamp"
        },
        "hangarSize": {
          "group": 2
        },
        "location": {
          "group": 3
        },
        "playerName": {
          "group": 4
        },
        "playerId": {
          "group": 5
        }
      },
      "message": "Assigned {hangarSize} hangar at {location}"
    }
  ]
}